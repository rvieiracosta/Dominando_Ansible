# ansible.cfg
# Este é o arquivo de configuração principal do Ansible.
# Ele controla o comportamento do Ansible em termos de onde procurar inventários,
# como se conectar a hosts remotos, configurações de privilégio, etc.

[defaults]
# Esta seção define as configurações padrão para a maioria das operações do Ansible.

# inventory = /etc/ansible/hosts
# Define o caminho para o arquivo de inventário. O inventário lista os servidores
# que o Ansible irá gerenciar.
# Exemplo: Se seu inventário estiver em um arquivo chamado 'hosts' no diretório atual:
inventory = ./hosts

# remote_user = seu_usuario
# O usuário padrão que o Ansible usará para se conectar aos hosts remotos via SSH.
# É uma boa prática usar um usuário não-root para conexões iniciais.
# Exemplo:
remote_user = ansible_user

# private_key_file = ~/.ssh/id_rsa
# O caminho para a chave SSH privada a ser usada para autenticação nos hosts remotos.
# Certifique-se de que este arquivo tenha permissões restritas (e.g., chmod 400).
# Exemplo:
private_key_file = ~/.ssh/id_rsa

# forks = 5
# O número de processos paralelos que o Ansible usará para se comunicar com os hosts.
# Um valor maior significa mais hosts sendo configurados simultaneamente,
# mas também pode consumir mais recursos na máquina controladora.
# Para iniciantes, o padrão geralmente é suficiente ou um valor pequeno.
forks = 5

# host_key_checking = False
# ATENÇÃO: Desabilitar a verificação de chave do host (host_key_checking)
# NÃO É RECOMENDADO em ambientes de produção por motivos de segurança.
# No entanto, para ambientes de teste pode ser útil.
# Certifique-se de reabilitá-lo (True) ou gerenciar chaves de host em produção.
host_key_checking = False

# fact_caching = jsonfile
# fact_caching_connection = /tmp/ansible_facts
# fact_caching_timeout = 86400
# Configura o cache de "facts" (informações coletadas sobre os hosts).
# Isso pode acelerar execuções subsequentes, pois o Ansible não precisará
# coletar os fatos toda vez.
# 'jsonfile' armazena os fatos em arquivos JSON.
# 'fact_caching_connection' é o diretório para os arquivos de cache.
# 'fact_caching_timeout' define por quanto tempo os fatos são válidos (em segundos).
# fact_caching = jsonfile
# fact_caching_connection = /tmp/ansible_facts
# fact_caching_timeout = 86400

# log_path = /var/log/ansible.log
# Define o caminho para o arquivo de log das operações do Ansible.
# Útil para depuração e auditoria. Certifique-se de que o usuário Ansible tenha
# permissão de escrita no diretório.
# log_path = /var/log/ansible.log

# roles_path = ./roles:/etc/ansible/roles
# Define os diretórios onde o Ansible deve procurar por 'roles'.
# Roles são uma forma de organizar playbooks e outros arquivos Ansible de forma reutilizável.
# O ponto (./) indica o diretório atual do projeto.
roles_path = ./roles

[privilege_escalation]
# Esta seção configura o "escalonamento de privilégios" (como o 'sudo' ou 'su').
# Isso permite que o Ansible execute tarefas como um usuário com mais privilégios
# (e.g., root) nos hosts remotos, mesmo que a conexão inicial seja com um usuário comum.

# become = True
# Habilita o escalonamento de privilégios. Se definido como 'True', o Ansible
# tentará se tornar outro usuário para executar tarefas privilegiadas.
become = True

# become_method = sudo
# O método a ser usado para escalonamento de privilégios (e.g., sudo, su, pbrun, doas).
# 'sudo' é o mais comum em sistemas Linux/Unix.
become_method = sudo

# become_user = root
# O usuário para o qual o Ansible tentará escalar privilégios.
# 'root' é o mais comum para tarefas administrativas.
become_user = root

# become_ask_pass = False
# Se o Ansible deve pedir uma senha para o escalonamento de privilégios.
# Geralmente definido como 'False' se o usuário remoto tiver configuração sudoers
# para não pedir senha para o 'become_user' (e.g., NOPASSWD).
become_ask_pass = False

[ssh_connection]
# Configurações relacionadas à conexão SSH que o Ansible usa.

# pipelining = True
# Habilita o pipelining SSH. Isso reduz o número de conexões SSH,
# enviando múltiplos comandos em uma única conexão. Pode melhorar o desempenho.
pipelining = True

# ssh_args = -o ControlMaster=auto -o ControlPersist=60m
# Argumentos adicionais a serem passados para o comando SSH.
# 'ControlMaster' e 'ControlPersist' são ótimos para desempenho, pois mantêm
# uma conexão SSH persistente, evitando a renegociação para cada tarefa.
ssh_args = -o ControlMaster=auto -o ControlPersist=60m